;library ieee;
use ieee.std_logic_1164.all;

entity top is
port (SW: in std_logic_vector(17 downto 0);
 HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, HEX6, HEX7: OUT STD_LOGIC_VECTOR(6 DOWNTO 0);
 LEDG: out std_logic_vector(17 downto 0)
 );


end top;

-- CIRCUIT IMPLEMENTATION


-- OUTPUT(0) - OUTPUT(3): HEX0
architecture toplevel of top is

COMPONENT ADDER8

port(A, B: in std_logic_vector(7 downto 0); 
Cin: in std_logic;
Cout: out std_logic;
FullSum: out std_logic_vector(7 downto 0)
);

END COMPONENT;

COMPONENT ALU IS
port(
A, B, C, D: in std_logic;
HEX: out std_logic_vector(6 downto 0)
);
end component;

signal A, B, C, D, Output : std_logic_vector (7 downto 0);


begin

--Input lights
LIGHT7 : ALU port map (SW(15), SW(14), SW(13), SW(12), HEX7(6 downto 0));
LIGHT6 : ALU port map (SW(11), SW(10), SW(9), SW(8), HEX6(6 downto 0));
LIGHT5 : ALU port map (SW(7), SW(6), SW(5), SW(4), HEX5(6 downto 0));
LIGHT4 : ALU port map (SW(3), SW(2), SW(1), SW(0), HEX4(6 downto 0));
LIGHT3 : ALU port map (SW(15), SW(14), SW(13), SW(12), HEX3(6 downto 0));


A <= (SW(7 DOWNTO 0) AND (SW(15 DOWNTO 8)));
B <= ((SW(7 DOWNTO 0)) OR (SW(15 DOWNTO 8)));

Adding : ADDER8 PORT MAP (SW(15 DOWNTO 8), SW(7 DOWNTO 0), '0', LEDG(8), C);
Subtracting : ADDER8 PORT MAP (SW(15 DOWNTO 8), NOT SW(7 DOWNTO 0), '1', LEDG(7), D);


Output <= A WHEN (SW(16) = '0' and SW(17) = '0')
			ELSE B WHEN (SW(16) = '0' and SW(17) = '1')
			ELSE C WHEN (SW(16) = '1' and SW(17) = '0')
			ELSE D;
	
--Output lights
LIGHT0 : ALU port map (Output(3), Output(2), Output(1), Output(0), HEX0(6 downto 0));
LIGHT1 : ALU port map (Output(7), Output(6), Output(5), Output(4), HEX1(6 downto 0));

end toplevel;